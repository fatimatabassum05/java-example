pipeline{
    agent any
    environment{
        IMAGE_TAG = "${BUILD_NUMBER}"
    }
    options {
      buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '7', numToKeepStr: '10')
      retry(3)
      timestamps()
      throttleJobProperty categories: [], limitOneJobWithMatchingParams: false, maxConcurrentPerNode: 2, maxConcurrentTotal: 2, paramsToUseForLimit: '', throttleEnabled: true, throttleOption: 'project'
    }
    stages{
         stage('Git Checkout Stage') {
            agent {label 'sonar_node'}
            steps{
                git branch: 'main', url: 'https://github.com/fatimatabassum05/java-example.git'
            }
         }
 //       stage('SonarQube Analysis Stage') {
 //           agent {label 'sonar_node'}
 //           steps{
 //               withSonarQubeEnv('sonar') { 
 //                   sh "mvn clean verify sonar:sonar -Dsonar.projectKey=sonarqube_2"
 //               }
 //           }
 //       }
        stage('Build docker Image') {
          agent {label 'docker'}
          steps{
            sh 'docker build -t 905418352029.dkr.ecr.ap-south-1.amazonaws.com/fatimatabassum:IMAGE_TAG .'
          }
        }
        stage('Push to ECR'){
            agent {label 'docker'}
            steps{
                withCredentials([aws(credentialsId: "awsCred", region: "ap-south-1")]) {
                script {
                  
                  sh 'docker push 905418352029.dkr.ecr.ap-south-1.amazonaws.com/fatimatabassum:IMAGE_TAG'
                    }
                }
            }
        }
        stage('Deploy Stage') {
          agent {label 'docker'}
          steps{
                withCredentials([aws(credentialsId: "awsCred", region: "ap-south-1")]) {
                    sh 'aws eks --region ap-south-1 update-kubeconfig --name eks-cluster'
                    sh 'helm upgrade --install webapp-project ./helm1 --namespace dev --create-namespace'
              }
          } 
        }
    }
        post {
            always {
                cleanWs()
            }
            success {
                echo 'Pipeline completed successfully.'
            }
            failure {
                echo 'Pipeline failed.'
            }
        }
}
